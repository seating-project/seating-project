// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? // @db.Text
//   access_token      String? // @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? // @db.Text
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  // accounts      Account[]
  // sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Logo {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  image    String
  Template Template[]
}

model Student {
  id             Int        @id @default(autoincrement())
  name           String
  registerNumber String     @unique
  gender         String
  department     Department @relation(fields: [departmentId], references: [id])
  year           Year       @relation(fields: [yearId], references: [id])
  degree         Degree     @relation(fields: [degreeId], references: [id])
  departmentId   Int
  yearId         Int
  degreeId       Int
  phone_number   String?
}

model Year {
  id       Int       @id @default(autoincrement())
  year     Int       @unique
  students Student[]
}

model Degree {
  id          Int          @id @default(autoincrement())
  degree      String       @unique
  fullName    String
  duration    Int
  type        DegreeType
  departments Department[]
  students    Student[]
}

model Department {
  id               Int            @id @default(autoincrement())
  branch           String         @unique
  shortName        String
  code             String
  Degree           Degree         @relation(fields: [degreeId], references: [id])
  type             DepartmentType
  students         Student[]
  degreeId         Int
  subjects         Subject[]
  departmentsLeft  Exam[]         @relation("departmentsLeft")
  departmentsRight Exam[]         @relation("departmentsRight")
  departments      Template[]     @relation("departments")
}

model Building {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  rooms      Room[]
  blocks     Block[]
  Template   Template? @relation(fields: [templateId], references: [id])
  templateId Int?
}

model Room {
  id         Int       @id @default(autoincrement())
  number     String    @unique
  strength   Int
  building   Building  @relation(fields: [buildingId], references: [id])
  buildingId Int
  block      Block     @relation(fields: [blockId], references: [id])
  blockId    Int
  roomOrder  Exam[]    @relation("roomsOrder")
  girlsRoom  Exam[]    @relation("girlsRooms")
  Template   Template? @relation(fields: [templateId], references: [id])
  templateId Int?
}

model Block {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  rooms      Room[]
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId Int
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String
  code        String       @unique
  departments Department[]
}

model Exam {
  id                        Int                 @id @default(autoincrement())
  name                      String              @unique
  isPhD                     Boolean
  isMe                      Boolean
  isYearsTogether           Boolean
  isDepartmentsTogether     Boolean
  isSendWhatsappMessage     Boolean
  timeToSendWhatsappMessage DateTime?
  // setsForWhichSubjects      Subject[]
  // noOfSets                  Int?
  secondColumnOptions       SecondColumnOptions
  departmentsLeft           Department[]        @relation("departmentsLeft")
  departmentsRight          Department[]        @relation("departmentsRight")
  minimumStudentsInRoom     Int                 @default(60)
  randomizeEveryNRooms      Int                 @default(0)
  roomsOrder                Room[]              @relation("roomsOrder")
  girlsRooms                Room[]              @relation("girlsRooms")
  strictlyDivideBuildings   Boolean             @default(false)
  isCommonRoomStrength      Boolean             @default(false)
}

model Template {
  id                          Int          @id @default(autoincrement())
  name                        String       @unique
  numberOfRows                Int
  numberOfColumns             Int
  departments                 Department[] @relation("departments")
  roomStrength                Int
  rooms                       Room[]
  isSingleSeater              Boolean
  isBoysGirlsSeparate         Boolean
  buildings                   Building[]
  startTime                   DateTime
  endTime                     DateTime
  isAlternateDepartmentSeated Boolean
  isRandomizedDepartments     Boolean
  Logo                        Logo         @relation(fields: [logoId], references: [id])
  logoId                      Int
}

enum DepartmentType {
  Circuit
  NonCircuit
  PhD
}

enum DegreeType {
  Bachelors
  Masters
  PhD
}

enum SecondColumnOptions {
  PresentAbsent
  SeatNumber
}
